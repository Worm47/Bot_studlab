import asyncio
import logging
from aiogram import Bot, Dispatcher, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command

from API.news import get_top_news
import random
import joke

from configuration.config import TOKEN_TG

import keyboards as kb

from database.models import async_main
import database.requests as rq

base_city = ""
base_joke = ""
base_news = ""


TOKEN = TOKEN_TG

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def start_command_handler(message: Message) -> None:
    await command_start_handler(message)

@dp.message(Command("help"))
async def start_command_handler(message: Message) -> None:
    await help_command_handler(message)

@dp.message(Command("weather"))
async def weather_command_handler(message: Message) -> None:
    await command_weather_handler(message)

@dp.message(Command("news"))
async def news_command_handler(message: Message) -> None:
    await news_command_handler(message)

@dp.message(Command("joke"))
async def joke_command_handler(message: Message) -> None:
    await joke_main_menu_handler(message)

@dp.message(Command("settings"))
async def settings_command_handler(message: Message) -> None:
    await settings_handler(message)

@dp.message(Command("help"))
async def help_command_handler(message: Message) -> None:
    await help_handler(message)

@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    global base_city, base_news, base_joke
    user_id = message.from_user.id
    base_city, base_news, base_joke = await rq.get_user_settings(user_id)
    await rq.set_user(message.from_user.id)
    await rq.set_base_city(message.from_user.id, base_city)  # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–º–∞–Ω–¥—É
    await rq.set_base_news(message.from_user.id, base_news)  # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–º–∞–Ω–¥—É
    await rq.set_base_joke(message.from_user.id, base_joke)  # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–º–∞–Ω–¥—É
    await rq.set_current_command(message.from_user.id, "/start")  # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–º–∞–Ω–¥—É
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}!",
        reply_markup=kb.menu_keyboard
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
def create_settings_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=f"–ü–æ–≥–æ–¥–∞‚òÄÔ∏è: {base_city}")],
            [KeyboardButton(text=f"–ù–æ–≤–æ—Å—Ç–∏üì∞: {kb.category_mapping_rus[base_news]}")],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –Ω–æ–≤–æ—Å—Ç–µ–π
            [KeyboardButton(text=f"–®—É—Ç–∫–∏ü§°: {kb.joke_category_mapping_rus[base_joke]}")],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å —à—É—Ç–æ–∫
            [KeyboardButton(text="–ú–µ–Ω—é‚Ü©Ô∏è")]
        ],
        resize_keyboard=True
    )

# –ì—Ä—É–ø–ø—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class JokeStates(StatesGroup):
    waiting_for_category = State()

class NewsStates(StatesGroup):
    waiting_for_category = State()

class WeatherStates(StatesGroup):
    waiting_for_city = State()

class SettingsStates(StatesGroup):
    changing_default_weather = State()
    changing_default_news = State()
    changing_default_joke = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–®—É—Ç–∫–∞ü§°" –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é
@dp.message(lambda message: message.text == "–®—É—Ç–∫–∞ü§°")
async def joke_main_menu_handler(message: Message) -> None:
    global base_city, base_news, base_joke
    user_id = message.from_user.id
    base_city, base_news, base_joke = await rq.get_user_settings(user_id)
    await rq.set_current_command(message.from_user.id, "/joke")

    if base_joke.lower() == "—Ä–∞–±–æ—Ç–∞":
        joke_to_tell = random.choice(joke.work_jokes)
    elif base_joke.lower() == "—à—Ç–∏—Ä–ª–∏—Ü":
        joke_to_tell = random.choice(joke.shtirlitz_jokes)
    elif base_joke.lower() == "undertale":
        joke_to_tell = random.choice(joke.undertale_jokes)
    elif base_joke.lower() == "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã":
        joke_to_tell = random.choice(joke.programmer_jokes)
    else:
        joke_to_tell = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —à—É—Ç–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞."

    await message.answer(joke_to_tell)
    await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=kb.joke_action_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —à—É—Ç–æ–∫
@dp.message(lambda message: message.text == "–î—Ä—É–≥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—èü§°")
async def choose_another_joke_category(message: Message, state: FSMContext) -> None:
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —à—É—Ç–æ–∫:", reply_markup=kb.joke_categories_keyboard)
    await state.set_state(JokeStates.waiting_for_category)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —à—É—Ç–æ–∫
@dp.message(JokeStates.waiting_for_category)
async def tell_joke_from_selected_category(message: Message, state: FSMContext) -> None:
    selected_category = message.text

    if selected_category == "–†–∞–±–æ—Ç–∞üíº":
        joke_to_tell = random.choice(joke.work_jokes)
    elif selected_category == "–®—Ç–∏—Ä–ª–∏—Üü§´":
        joke_to_tell = random.choice(joke.shtirlitz_jokes)
    elif selected_category == "Undertaleüëª":
        joke_to_tell = random.choice(joke.undertale_jokes)
    elif selected_category == "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ãüßë‚Äçüíª":
        joke_to_tell = random.choice(joke.programmer_jokes)
    else:
        joke_to_tell = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π."

    await message.answer(joke_to_tell)
    await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=kb.joke_action_keyboard())
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–ú–µ–Ω—é‚Ü©Ô∏è"
@dp.message(lambda message: message.text == "–ú–µ–Ω—é‚Ü©Ô∏è")
async def back_to_menu(message: Message) -> None:
    await rq.set_current_command(message.from_user.id, "/menu")
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", reply_markup=kb.menu_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "/news"
@dp.message(lambda message: message.text == "–ù–æ–≤–æ—Å—Ç–∏üì∞")
async def news_command_handler(message: Message) -> None:
    await rq.set_current_command(message.from_user.id, "/news")
    news_texts = get_top_news(base_news)

    for news_text in news_texts:

        await message.answer(news_text, parse_mode=ParseMode.MARKDOWN)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:",
                         reply_markup=kb.single_row_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message(lambda message: message.text == "–î—Ä—É–≥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—èüì∞")
async def choose_another_category(message: Message, state: FSMContext) -> None:
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π:", reply_markup=kb.categories_keyboard)
    await state.set_state(NewsStates.waiting_for_category)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message(NewsStates.waiting_for_category)
async def get_news_from_category(message: Message, state: FSMContext) -> None:
    category = message.text
    category_in_english = kb.category_mapping.get(category, category)
    news_texts = get_top_news(category_in_english)
    for news_text in news_texts:
        await message.answer(news_text, parse_mode=ParseMode.MARKDOWN)

    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:",
                         reply_markup=kb.single_row_keyboard)


# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–ü–æ–º–æ—â—åü§ñ"
@dp.message(lambda message: message.text == "–ü–æ–º–æ—â—åü§ñ")
async def help_handler(message: Message) -> None:
    await rq.set_current_command(message.from_user.id, "/help")
    command_list = """
<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º
/help - –ü–æ–º–æ—â—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
/weather - –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É
/news - –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏
/joke - –£–∑–Ω–∞—Ç—å —à—É—Ç–∫—É
/settings - –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
"""
    await message.answer(
        command_list,
        parse_mode=ParseMode.HTML,
        reply_markup=kb.help_keyboard
    )

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
@dp.message(lambda message: message.text == "–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—ÉüÜò")
async def contact_support(message: Message) -> None:
    support_link = "[@worm47](https://t.me/worm47)"
    await message.answer(
        f"–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {support_link}",
        parse_mode=ParseMode.MARKDOWN,
        disable_web_page_preview=True
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è"
@dp.message(lambda message: message.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è")
async def settings_handler(message: Message) -> None:
    global base_city, base_news, base_joke
    user_id = message.from_user.id
    base_city, base_news, base_joke = await rq.get_user_settings(user_id)
    await rq.set_current_command(message.from_user.id, "/setting")
    await message.answer(
        "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é:",
        reply_markup=create_settings_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
@dp.message(lambda message: message.text.startswith("–ü–æ–≥–æ–¥–∞‚òÄÔ∏è:"))
async def change_default_weather(message: Message, state: FSMContext) -> None:
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–∑–æ–≤—ã–π –≥–æ—Ä–æ–¥:")
    await state.set_state(SettingsStates.changing_default_weather)

@dp.message(SettingsStates.changing_default_weather)
async def set_default_weather(message: Message, state: FSMContext) -> None:
    global base_city
    base_city = message.text
    await rq.set_base_city(message.from_user.id, base_city)
    await message.answer(f"–ë–∞–∑–æ–≤—ã–π –≥–æ—Ä–æ–¥ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {base_city}", reply_markup=create_settings_keyboard())
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
@dp.message(lambda message: message.text.startswith("–ù–æ–≤–æ—Å—Ç–∏üì∞:"))
async def change_default_news(message: Message, state: FSMContext) -> None:
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:", reply_markup=kb.categories_keyboard)
    await state.set_state(SettingsStates.changing_default_news)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–π –±–∞–∑–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
@dp.message(SettingsStates.changing_default_news)
async def set_default_news(message: Message, state: FSMContext) -> None:
    global base_news
    category_in_english = list(kb.category_mapping_rus.keys())[list(kb.category_mapping_rus.values()).index(message.text)]
    if category_in_english:
        base_news = category_in_english
        await rq.set_base_news(message.from_user.id, base_news)
        await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {kb.category_mapping_rus[base_news]}",
                             reply_markup=create_settings_keyboard())
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.",
                             reply_markup=kb.categories_keyboard)
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —à—É—Ç–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
@dp.message(lambda message: message.text.startswith("–®—É—Ç–∫–∏ü§°:"))
async def change_default_joke_request(message: Message, state: FSMContext) -> None:
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –±–∞–∑–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —à—É—Ç–æ–∫:",
        reply_markup=kb.joke_categories_keyboard
    )
    await state.set_state(SettingsStates.changing_default_joke)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–π –±–∞–∑–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —à—É—Ç–æ–∫
@dp.message(SettingsStates.changing_default_joke)
async def set_default_joke(message: Message, state: FSMContext) -> None:
    global base_joke
    selected_category = list(kb.joke_category_mapping_rus.keys())[list(kb.joke_category_mapping_rus.values()).index(message.text)]

    if selected_category:
        base_joke = selected_category
        await rq.set_base_joke(message.from_user.id, base_joke)
        await message.answer(
            f"–ë–∞–∑–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —à—É—Ç–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {kb.joke_category_mapping_rus[base_joke]}",
            reply_markup=create_settings_keyboard()
        )
    else:
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.",
            reply_markup=kb.joke_categories_keyboard
        )

    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–ü–æ–≥–æ–¥–∞‚òÄÔ∏è"
@dp.message(lambda message: message.text == "–ü–æ–≥–æ–¥–∞‚òÄÔ∏è")
async def command_weather_handler(message: Message) -> None:
    global base_city, base_news, base_joke
    user_id = message.from_user.id
    base_city, base_news, base_joke = await rq.get_user_settings(user_id)
    await rq.set_current_command(message.from_user.id, "/weather")
    from API.weather import get_weather

    weather_info = get_weather(base_city)

    if weather_info != "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–æ—Ä–æ–¥‚úçÔ∏è":

        await message.answer(weather_info, reply_markup=kb.weather_action_keyboard)
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—éüõ†", reply_markup=kb.weather_action_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥üåç"
@dp.message(lambda message: message.text == "–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥üåç")
async def choose_another_city(message: Message, state: FSMContext) -> None:
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã:")
    await state.set_state(WeatherStates.waiting_for_city)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ –≥–æ—Ä–æ–¥–µ
@dp.message(WeatherStates.waiting_for_city)
async def get_weather_for_city(message: Message, state: FSMContext) -> None:
    city_name = message.text
    from API.weather import get_weather
    weather_info = get_weather(city_name)
    await message.answer(weather_info, reply_markup=kb.weather_action_keyboard)
    await state.clear()

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥
@dp.message()
async def handle_messages(message: Message) -> None:
    response = {
    }.get(message.text, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

    await message.answer(response, reply_markup=kb.menu_keyboard)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main() -> None:
    await async_main()
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())

